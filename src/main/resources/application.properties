server.port=${ACT_QUERY_PORT:8182}
spring.application.name=${ACT_QUERY_APP_NAME:query}

spring.cloud.stream.bindings.producer.destination=${ACT_QUERY_PRODUCER_DEST:engineEvents}
spring.cloud.stream.bindings.producer.contentType=${ACT_QUERY_PRODUCER_CONTENT_TYPE:application/json}
spring.cloud.stream.bindings.queryConsumer.destination=${ACT_QUERY_CONSUMER_DEST:engineEvents}
spring.cloud.stream.bindings.queryConsumer.group=${ACT_QUERY_CONSUMER_GROUP:query}
spring.cloud.stream.bindings.queryConsumer.contentType=${ACT_QUERY_CONSUMER_CONTENT_TYPE:application/json}

spring.cloud.stream.bindings.notificationsConsumer.destination=${ACT_NOTIFICATIONS_CONSUMER_DEST:engineEvents}
spring.cloud.stream.bindings.notificationsConsumer.group=${ACT_NOTIFICATIONS_CONSUMER_GROUP:notifications}
spring.cloud.stream.bindings.notificationsConsumer.contentType=${ACT_NOTIFICATIONS_CONSUMER_CONTENT_TYPE:application/json}

spring.cloud.stream.binders.notificatonsGateway.type=rabbit

spring.cloud.stream.bindings.notificatonsGateway.binder=notificatonsGateway
spring.cloud.stream.bindings.notificatonsGateway.destination=${ACT_NOTIFICATIONS_GATEWAY_DEST:amq.topic}
spring.cloud.stream.bindings.notificatonsGateway.content-type=${ACT_NOTIFICATIONS_GATEWAY_CONTENT_TYPE:application/json}
spring.cloud.stream.rabbit.bindings.notificatonsGateway.producer.exchangeType=${ACT_NOTIFICATIONS_GATEWAY_EXCHANGE_TYPE:topic}
spring.cloud.stream.rabbit.bindings.notificatonsGateway.producer.routingKeyExpression=${ACT_NOTIFICATIONS_GATEWAY_ROUTING_KEY_EXPRESSION:headers['routingKey']}

#default to sharing database of runtime bundle
spring.datasource.driverClassName=${ACT_QUERY_DB_DRIVER:org.postgresql.Driver}
spring.datasource.url=${ACT_QUERY_DB_URI:jdbc:postgresql://rb-postgres:5432/activitidb}
spring.datasource.username=${ACT_QUERY_DB_USER:postgres}
spring.datasource.password=${ACT_QUERY_DB_PASS:password}

spring.jpa.database-platform=${ACT_QUERY_DB_PLATFORM:org.hibernate.dialect.PostgreSQLDialect}
spring.jpa.generate-ddl=${ACT_QUERY_GENERATEDDL:true}
spring.jpa.hibernate.ddl-auto=${ACT_QUERY_DDLAUTO:create}

#for https://stackoverflow.com/questions/46493500/hibernate-with-c3p0-createclob-is-not-yet-implemented
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

spring.jackson.serialization.fail-on-unwrapped-type-identifiers=${ACT_QUERY_JACKSON_FAIL_ON_UNWRAPPED_IDS:false}

keycloak.auth-server-url=${ACT_KEYCLOAK_URL:http://activiti-cloud-sso-idm:8180/auth}
keycloak.realm=${ACT_KEYCLOAK_REALM:springboot}
keycloak.resource=${ACT_KEYCLOAK_RESOURCE:activiti}
keycloak.public-client=${ACT_KEYCLOAK_CLIENT:true}

keycloak.ssl-required=${ACT_KEYCLOAK_SSL_REQUIRED:none}

# by default admin endpoints open to every user (role 'user') but role can be overridden to e.g. admin
admin-role-name=${ACTIVITI_ADMIN_ROLE:user}

keycloak.security-constraints[0].authRoles[0]=${ACT_KEYCLOAK_ROLES:user}
keycloak.security-constraints[0].securityCollections[0].patterns[0]=${ACT_KEYCLOAK_PATTERNS:/v1/*}
keycloak.security-constraints[1].authRoles[0]=${admin-role-name}
keycloak.security-constraints[1].securityCollections[0].patterns[0]=/admin/*

keycloak.principal-attribute=${ACT_KEYCLOAK_PRINCIPAL_ATTRIBUTE:preferred-username}
# see https://issues.jboss.org/browse/KEYCLOAK-810 for configuration options

activiti.keycloak.admin-client-app=${ACT_KEYCLOAK_CLIENT_APP:admin-cli}
activiti.keycloak.client-user=${ACT_KEYCLOAK_CLIENT_USER:client}
activiti.keycloak.client-password=${ACT_KEYCLOAK_CLIENT_PASSWORD:client}
# this user needs to have the realm management roles assigned

spring.rabbitmq.host=${ACT_RABBITMQ_HOST:rabbitmq}
spring.rabbitmq.username=${ACT_RABBITMQ_USER:guest}
spring.rabbitmq.password=${ACT_RABBITMQ_PASS:guest}

eureka.client.serviceUrl.defaultZone=${ACT_EUREKA_URL:http://activiti-cloud-registry:8761/eureka/}

#hostname as declared to eureka
eureka.instance.hostname=${ACT_QUERY_HOST:activiti-cloud-query}
eureka.client.enabled=${ACT_QUERY_EUREKA_CLIENT_ENABLED:true}

#zipkin
spring.zipkin.base-url= http://zipkin:80/
spring.zipkin.sender.type= web
spring.sleuth.enabled = true
spring.sleuth.sampler.percentage = 1.0