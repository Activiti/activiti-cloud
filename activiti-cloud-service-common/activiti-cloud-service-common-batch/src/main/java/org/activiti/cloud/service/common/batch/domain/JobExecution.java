// Generated by delombok at Wed Jan 13 19:00:08 PST 2021
/*
 * Copyright 2017-2020 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.activiti.cloud.service.common.batch.domain;

import java.beans.ConstructorProperties;
import java.time.LocalDateTime;
import java.util.Collection;

import org.springframework.batch.core.BatchStatus;

import com.fasterxml.jackson.databind.annotation.JsonSerialize;

public final class JobExecution implements Comparable<JobExecution> {
    private static final String EXIT_CODE = "exitCode";
    private static final String EXIT_DESCRIPTION = "exitDescription";
    private final long id;
    private final long jobId;
    private final String jobName;
    private final LocalDateTime startTime;
    private final LocalDateTime endTime;
    private final String exitCode;
    private final String exitDescription;
    @JsonSerialize(using = BatchStatusSerializer.class)
    private final BatchStatus status;
    private final Collection<String> exceptions;

    @Override
    public int compareTo(JobExecution o) {
        int result = this.getJobName() != null ? this.getJobName().compareToIgnoreCase(o.getJobName()) : 0;
        if (result == 0) result = Long.compare(id, o.id);
        if (result == 0) result = Long.compare(jobId, o.jobId);
        return result;
    }

    @ConstructorProperties({"id", "jobId", "jobName", "startTime", "endTime", "exitCode", "exitDescription", "status", "exceptions"})
    JobExecution(final long id, final long jobId, final String jobName, final LocalDateTime startTime, final LocalDateTime endTime, final String exitCode, final String exitDescription, final BatchStatus status, final Collection<String> exceptions) {
        this.id = id;
        this.jobId = jobId;
        this.jobName = jobName;
        this.startTime = startTime;
        this.endTime = endTime;
        this.exitCode = exitCode;
        this.exitDescription = exitDescription;
        this.status = status;
        this.exceptions = exceptions;
    }


    public static class JobExecutionBuilder {
        private long id;
        private long jobId;
        private String jobName;
        private LocalDateTime startTime;
        private LocalDateTime endTime;
        private String exitCode;
        private String exitDescription;
        private BatchStatus status;
        private Collection<String> exceptions;

        JobExecutionBuilder() {
        }

        public JobExecutionBuilder id(final long id) {
            this.id = id;
            return this;
        }

        public JobExecutionBuilder jobId(final long jobId) {
            this.jobId = jobId;
            return this;
        }

        public JobExecutionBuilder jobName(final String jobName) {
            this.jobName = jobName;
            return this;
        }

        public JobExecutionBuilder startTime(final LocalDateTime startTime) {
            this.startTime = startTime;
            return this;
        }

        public JobExecutionBuilder endTime(final LocalDateTime endTime) {
            this.endTime = endTime;
            return this;
        }

        public JobExecutionBuilder exitCode(final String exitCode) {
            this.exitCode = exitCode;
            return this;
        }

        public JobExecutionBuilder exitDescription(final String exitDescription) {
            this.exitDescription = exitDescription;
            return this;
        }

        public JobExecutionBuilder status(final BatchStatus status) {
            this.status = status;
            return this;
        }

        public JobExecutionBuilder exceptions(final Collection<String> exceptions) {
            this.exceptions = exceptions;
            return this;
        }

        public JobExecution build() {
            return new JobExecution(id, jobId, jobName, startTime, endTime, exitCode, exitDescription, status, exceptions);
        }

        @Override
        public java.lang.String toString() {
            return "JobExecution.JobExecutionBuilder(id=" + this.id + ", jobId=" + this.jobId + ", jobName=" + this.jobName + ", startTime=" + this.startTime + ", endTime=" + this.endTime + ", exitCode=" + this.exitCode + ", exitDescription=" + this.exitDescription + ", status=" + this.status + ", exceptions=" + this.exceptions + ")";
        }
    }

    public static JobExecutionBuilder builder() {
        return new JobExecutionBuilder();
    }

    public long getId() {
        return this.id;
    }

    public long getJobId() {
        return this.jobId;
    }

    public String getJobName() {
        return this.jobName;
    }

    public LocalDateTime getStartTime() {
        return this.startTime;
    }

    public LocalDateTime getEndTime() {
        return this.endTime;
    }

    public String getExitCode() {
        return this.exitCode;
    }

    public String getExitDescription() {
        return this.exitDescription;
    }

    public BatchStatus getStatus() {
        return this.status;
    }

    public Collection<String> getExceptions() {
        return this.exceptions;
    }

    @Override
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof JobExecution)) return false;
        final JobExecution other = (JobExecution) o;
        if (this.getId() != other.getId()) return false;
        if (this.getJobId() != other.getJobId()) return false;
        final java.lang.Object this$jobName = this.getJobName();
        final java.lang.Object other$jobName = other.getJobName();
        if (this$jobName == null ? other$jobName != null : !this$jobName.equals(other$jobName)) return false;
        final java.lang.Object this$startTime = this.getStartTime();
        final java.lang.Object other$startTime = other.getStartTime();
        if (this$startTime == null ? other$startTime != null : !this$startTime.equals(other$startTime)) return false;
        final java.lang.Object this$endTime = this.getEndTime();
        final java.lang.Object other$endTime = other.getEndTime();
        if (this$endTime == null ? other$endTime != null : !this$endTime.equals(other$endTime)) return false;
        final java.lang.Object this$exitCode = this.getExitCode();
        final java.lang.Object other$exitCode = other.getExitCode();
        if (this$exitCode == null ? other$exitCode != null : !this$exitCode.equals(other$exitCode)) return false;
        final java.lang.Object this$exitDescription = this.getExitDescription();
        final java.lang.Object other$exitDescription = other.getExitDescription();
        if (this$exitDescription == null ? other$exitDescription != null : !this$exitDescription.equals(other$exitDescription)) return false;
        final java.lang.Object this$status = this.getStatus();
        final java.lang.Object other$status = other.getStatus();
        if (this$status == null ? other$status != null : !this$status.equals(other$status)) return false;
        final java.lang.Object this$exceptions = this.getExceptions();
        final java.lang.Object other$exceptions = other.getExceptions();
        if (this$exceptions == null ? other$exceptions != null : !this$exceptions.equals(other$exceptions)) return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final long $id = this.getId();
        result = result * PRIME + (int) ($id >>> 32 ^ $id);
        final long $jobId = this.getJobId();
        result = result * PRIME + (int) ($jobId >>> 32 ^ $jobId);
        final java.lang.Object $jobName = this.getJobName();
        result = result * PRIME + ($jobName == null ? 43 : $jobName.hashCode());
        final java.lang.Object $startTime = this.getStartTime();
        result = result * PRIME + ($startTime == null ? 43 : $startTime.hashCode());
        final java.lang.Object $endTime = this.getEndTime();
        result = result * PRIME + ($endTime == null ? 43 : $endTime.hashCode());
        final java.lang.Object $exitCode = this.getExitCode();
        result = result * PRIME + ($exitCode == null ? 43 : $exitCode.hashCode());
        final java.lang.Object $exitDescription = this.getExitDescription();
        result = result * PRIME + ($exitDescription == null ? 43 : $exitDescription.hashCode());
        final java.lang.Object $status = this.getStatus();
        result = result * PRIME + ($status == null ? 43 : $status.hashCode());
        final java.lang.Object $exceptions = this.getExceptions();
        result = result * PRIME + ($exceptions == null ? 43 : $exceptions.hashCode());
        return result;
    }

    @Override
    public String toString() {
        return "JobExecution(id=" + this.getId() + ", jobId=" + this.getJobId() + ", jobName=" + this.getJobName() + ", startTime=" + this.getStartTime() + ", endTime=" + this.getEndTime() + ", exitCode=" + this.getExitCode() + ", exitDescription=" + this.getExitDescription() + ", status=" + this.getStatus() + ", exceptions=" + this.getExceptions() + ")";
    }
}
