// Generated by delombok at Wed Jan 13 19:00:08 PST 2021
/*
 * Copyright 2017-2020 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.activiti.cloud.service.common.batch.controllers;

import javax.batch.operations.BatchRuntimeException;

import org.springframework.batch.core.JobParametersInvalidException;
import org.springframework.batch.core.configuration.DuplicateJobException;
import org.springframework.batch.core.launch.JobParametersNotFoundException;
import org.springframework.batch.core.launch.NoSuchJobException;
import org.springframework.batch.core.launch.NoSuchJobExecutionException;
import org.springframework.batch.core.launch.NoSuchJobInstanceException;
import org.springframework.batch.core.repository.JobExecutionAlreadyRunningException;
import org.springframework.batch.core.repository.JobInstanceAlreadyCompleteException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

@ControllerAdvice
public class JobResponseControllerAdvice extends ResponseEntityExceptionHandler {

    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(JobResponseControllerAdvice.class);

    @ExceptionHandler(Exception.class)
    protected ResponseEntity<Object> handleAnyException(Exception e, WebRequest request) {
        log.error("Request {} failed with {}", request, e);
        String message = e.getMessage();
        String causeMessage = "";
        if (e.getCause() != null) causeMessage = e.getCause().getMessage();
        HttpStatus status = HttpStatus.INTERNAL_SERVER_ERROR;
        ApiError apiError = new ApiError(status.toString(), message, e.getClass().getSimpleName(), causeMessage);
        return handleExceptionInternal(e, apiError, new HttpHeaders(), status, request);
    }

    @ExceptionHandler(BatchRuntimeException.class)
    protected ResponseEntity<Object> handleBatchRuntimeException(BatchRuntimeException e, WebRequest request) {
        log.error("Request {} failed with {}", request, e);
        Throwable cause = e.getCause();
        HttpStatus status = HttpStatus.INTERNAL_SERVER_ERROR;
        if (cause instanceof DuplicateJobException || cause instanceof JobExecutionAlreadyRunningException || cause instanceof JobInstanceAlreadyCompleteException) status = HttpStatus.CONFLICT;
         else if (cause instanceof JobParametersInvalidException || cause instanceof JobParametersNotFoundException) status = HttpStatus.BAD_REQUEST;
         else if (cause instanceof NoSuchJobException || cause instanceof NoSuchJobExecutionException || cause instanceof NoSuchJobInstanceException) status = HttpStatus.NOT_FOUND;
        ApiError apiError = new ApiError(status.toString(), cause.getMessage(), cause.getClass().getSimpleName(), e.getMessage());
        return handleExceptionInternal(e, apiError, new HttpHeaders(), status, request);
    }

    @ExceptionHandler(javax.batch.operations.NoSuchJobExecutionException.class)
    protected ResponseEntity<Object> handleNoSuchJobExecutionException(javax.batch.operations.NoSuchJobExecutionException e, WebRequest request) {
        HttpStatus status = HttpStatus.NOT_FOUND;
        return handleExceptionInternal(e, new ApiError(status.toString(), e.getMessage(), e.getClass().getSimpleName(), ""), new HttpHeaders(), status, request);
    }


    public class ApiError {
        String status;
        String message;
        String exception;
        String detail;

        public ApiError() {
        }

        @java.beans.ConstructorProperties({"status", "message", "exception", "detail"})
        public ApiError(final String status, final String message, final String exception, final String detail) {
            this.status = status;
            this.message = message;
            this.exception = exception;
            this.detail = detail;
        }

        public String getStatus() {
            return this.status;
        }

        public String getMessage() {
            return this.message;
        }

        public String getException() {
            return this.exception;
        }

        public String getDetail() {
            return this.detail;
        }

        public void setStatus(final String status) {
            this.status = status;
        }

        public void setMessage(final String message) {
            this.message = message;
        }

        public void setException(final String exception) {
            this.exception = exception;
        }

        public void setDetail(final String detail) {
            this.detail = detail;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object o) {
            if (o == this) return true;
            if (!(o instanceof JobResponseControllerAdvice.ApiError)) return false;
            final JobResponseControllerAdvice.ApiError other = (JobResponseControllerAdvice.ApiError) o;
            if (!other.canEqual((java.lang.Object) this)) return false;
            final java.lang.Object this$status = this.getStatus();
            final java.lang.Object other$status = other.getStatus();
            if (this$status == null ? other$status != null : !this$status.equals(other$status)) return false;
            final java.lang.Object this$message = this.getMessage();
            final java.lang.Object other$message = other.getMessage();
            if (this$message == null ? other$message != null : !this$message.equals(other$message)) return false;
            final java.lang.Object this$exception = this.getException();
            final java.lang.Object other$exception = other.getException();
            if (this$exception == null ? other$exception != null : !this$exception.equals(other$exception)) return false;
            final java.lang.Object this$detail = this.getDetail();
            final java.lang.Object other$detail = other.getDetail();
            if (this$detail == null ? other$detail != null : !this$detail.equals(other$detail)) return false;
            return true;
        }

        protected boolean canEqual(final java.lang.Object other) {
            return other instanceof JobResponseControllerAdvice.ApiError;
        }

        @java.lang.Override
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            final java.lang.Object $status = this.getStatus();
            result = result * PRIME + ($status == null ? 43 : $status.hashCode());
            final java.lang.Object $message = this.getMessage();
            result = result * PRIME + ($message == null ? 43 : $message.hashCode());
            final java.lang.Object $exception = this.getException();
            result = result * PRIME + ($exception == null ? 43 : $exception.hashCode());
            final java.lang.Object $detail = this.getDetail();
            result = result * PRIME + ($detail == null ? 43 : $detail.hashCode());
            return result;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return "JobResponseControllerAdvice.ApiError(status=" + this.getStatus() + ", message=" + this.getMessage() + ", exception=" + this.getException() + ", detail=" + this.getDetail() + ")";
        }
    }
}
